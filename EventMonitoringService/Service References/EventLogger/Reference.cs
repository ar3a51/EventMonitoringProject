//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventMonitoringService.EventLogger {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ICAA.EventMonitoringService.org/", ConfigurationName="EventLogger.EventSoap")]
    public interface EventSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ICAA.EventMonitoringService.org/testConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string testConnection();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ICAA.EventMonitoringService.org/testConnection", ReplyAction="*")]
        System.IAsyncResult BegintestConnection(System.AsyncCallback callback, object asyncState);
        
        string EndtestConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ICAA.EventMonitoringService.org/logEvent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        EventMonitoringService.EventLogger.ResultSet logEvent(long eventId, string strEventType, string strEventMessage, string strMachineName, string strUsername, string strSource, string dtDateTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ICAA.EventMonitoringService.org/logEvent", ReplyAction="*")]
        System.IAsyncResult BeginlogEvent(long eventId, string strEventType, string strEventMessage, string strMachineName, string strUsername, string strSource, string dtDateTime, System.AsyncCallback callback, object asyncState);
        
        EventMonitoringService.EventLogger.ResultSet EndlogEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ICAA.EventMonitoringService.org/getLogInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        EventMonitoringService.EventLogger.ResultLog getLogInfo(string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ICAA.EventMonitoringService.org/getLogInfo", ReplyAction="*")]
        System.IAsyncResult BegingetLogInfo(string machineName, System.AsyncCallback callback, object asyncState);
        
        EventMonitoringService.EventLogger.ResultLog EndgetLogInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ICAA.EventMonitoringService.org/addNewMachine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        EventMonitoringService.EventLogger.ResultSet addNewMachine(string type, string machineName, string environment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ICAA.EventMonitoringService.org/addNewMachine", ReplyAction="*")]
        System.IAsyncResult BeginaddNewMachine(string type, string machineName, string environment, System.AsyncCallback callback, object asyncState);
        
        EventMonitoringService.EventLogger.ResultSet EndaddNewMachine(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ICAA.EventMonitoringService.org/removeMachine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        EventMonitoringService.EventLogger.ResultSet removeMachine(string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://ICAA.EventMonitoringService.org/removeMachine", ReplyAction="*")]
        System.IAsyncResult BeginremoveMachine(string machineName, System.AsyncCallback callback, object asyncState);
        
        EventMonitoringService.EventLogger.ResultSet EndremoveMachine(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ResultLog))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ICAA.EventMonitoringService.org/")]
    public partial class ResultSet : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string stringResultTypeField;
        
        private string stringResultMessageField;
        
        private string stringResultDataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string stringResultType {
            get {
                return this.stringResultTypeField;
            }
            set {
                this.stringResultTypeField = value;
                this.RaisePropertyChanged("stringResultType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string stringResultMessage {
            get {
                return this.stringResultMessageField;
            }
            set {
                this.stringResultMessageField = value;
                this.RaisePropertyChanged("stringResultMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string stringResultData {
            get {
                return this.stringResultDataField;
            }
            set {
                this.stringResultDataField = value;
                this.RaisePropertyChanged("stringResultData");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ICAA.EventMonitoringService.org/")]
    public partial class ResultLog : ResultSet {
        
        private System.Data.DataTable logListField;
        
        private string numberOfRecordsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.Data.DataTable logList {
            get {
                return this.logListField;
            }
            set {
                this.logListField = value;
                this.RaisePropertyChanged("logList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string numberOfRecords {
            get {
                return this.numberOfRecordsField;
            }
            set {
                this.numberOfRecordsField = value;
                this.RaisePropertyChanged("numberOfRecords");
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface EventSoapChannel : EventMonitoringService.EventLogger.EventSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class testConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public testConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class logEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public logEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EventMonitoringService.EventLogger.ResultSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EventMonitoringService.EventLogger.ResultSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLogInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLogInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EventMonitoringService.EventLogger.ResultLog Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EventMonitoringService.EventLogger.ResultLog)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class addNewMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addNewMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EventMonitoringService.EventLogger.ResultSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EventMonitoringService.EventLogger.ResultSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class removeMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public EventMonitoringService.EventLogger.ResultSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((EventMonitoringService.EventLogger.ResultSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventSoapClient : System.ServiceModel.ClientBase<EventMonitoringService.EventLogger.EventSoap>, EventMonitoringService.EventLogger.EventSoap {
        
        private BeginOperationDelegate onBegintestConnectionDelegate;
        
        private EndOperationDelegate onEndtestConnectionDelegate;
        
        private System.Threading.SendOrPostCallback ontestConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginlogEventDelegate;
        
        private EndOperationDelegate onEndlogEventDelegate;
        
        private System.Threading.SendOrPostCallback onlogEventCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLogInfoDelegate;
        
        private EndOperationDelegate onEndgetLogInfoDelegate;
        
        private System.Threading.SendOrPostCallback ongetLogInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddNewMachineDelegate;
        
        private EndOperationDelegate onEndaddNewMachineDelegate;
        
        private System.Threading.SendOrPostCallback onaddNewMachineCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveMachineDelegate;
        
        private EndOperationDelegate onEndremoveMachineDelegate;
        
        private System.Threading.SendOrPostCallback onremoveMachineCompletedDelegate;
        
        public EventSoapClient() {
        }
        
        public EventSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<testConnectionCompletedEventArgs> testConnectionCompleted;
        
        public event System.EventHandler<logEventCompletedEventArgs> logEventCompleted;
        
        public event System.EventHandler<getLogInfoCompletedEventArgs> getLogInfoCompleted;
        
        public event System.EventHandler<addNewMachineCompletedEventArgs> addNewMachineCompleted;
        
        public event System.EventHandler<removeMachineCompletedEventArgs> removeMachineCompleted;
        
        public string testConnection() {
            return base.Channel.testConnection();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegintestConnection(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegintestConnection(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndtestConnection(System.IAsyncResult result) {
            return base.Channel.EndtestConnection(result);
        }
        
        private System.IAsyncResult OnBegintestConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegintestConnection(callback, asyncState);
        }
        
        private object[] OnEndtestConnection(System.IAsyncResult result) {
            string retVal = this.EndtestConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OntestConnectionCompleted(object state) {
            if ((this.testConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.testConnectionCompleted(this, new testConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void testConnectionAsync() {
            this.testConnectionAsync(null);
        }
        
        public void testConnectionAsync(object userState) {
            if ((this.onBegintestConnectionDelegate == null)) {
                this.onBegintestConnectionDelegate = new BeginOperationDelegate(this.OnBegintestConnection);
            }
            if ((this.onEndtestConnectionDelegate == null)) {
                this.onEndtestConnectionDelegate = new EndOperationDelegate(this.OnEndtestConnection);
            }
            if ((this.ontestConnectionCompletedDelegate == null)) {
                this.ontestConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OntestConnectionCompleted);
            }
            base.InvokeAsync(this.onBegintestConnectionDelegate, null, this.onEndtestConnectionDelegate, this.ontestConnectionCompletedDelegate, userState);
        }
        
        public EventMonitoringService.EventLogger.ResultSet logEvent(long eventId, string strEventType, string strEventMessage, string strMachineName, string strUsername, string strSource, string dtDateTime) {
            return base.Channel.logEvent(eventId, strEventType, strEventMessage, strMachineName, strUsername, strSource, dtDateTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginlogEvent(long eventId, string strEventType, string strEventMessage, string strMachineName, string strUsername, string strSource, string dtDateTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginlogEvent(eventId, strEventType, strEventMessage, strMachineName, strUsername, strSource, dtDateTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EventMonitoringService.EventLogger.ResultSet EndlogEvent(System.IAsyncResult result) {
            return base.Channel.EndlogEvent(result);
        }
        
        private System.IAsyncResult OnBeginlogEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long eventId = ((long)(inValues[0]));
            string strEventType = ((string)(inValues[1]));
            string strEventMessage = ((string)(inValues[2]));
            string strMachineName = ((string)(inValues[3]));
            string strUsername = ((string)(inValues[4]));
            string strSource = ((string)(inValues[5]));
            string dtDateTime = ((string)(inValues[6]));
            return this.BeginlogEvent(eventId, strEventType, strEventMessage, strMachineName, strUsername, strSource, dtDateTime, callback, asyncState);
        }
        
        private object[] OnEndlogEvent(System.IAsyncResult result) {
            EventMonitoringService.EventLogger.ResultSet retVal = this.EndlogEvent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnlogEventCompleted(object state) {
            if ((this.logEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.logEventCompleted(this, new logEventCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void logEventAsync(long eventId, string strEventType, string strEventMessage, string strMachineName, string strUsername, string strSource, string dtDateTime) {
            this.logEventAsync(eventId, strEventType, strEventMessage, strMachineName, strUsername, strSource, dtDateTime, null);
        }
        
        public void logEventAsync(long eventId, string strEventType, string strEventMessage, string strMachineName, string strUsername, string strSource, string dtDateTime, object userState) {
            if ((this.onBeginlogEventDelegate == null)) {
                this.onBeginlogEventDelegate = new BeginOperationDelegate(this.OnBeginlogEvent);
            }
            if ((this.onEndlogEventDelegate == null)) {
                this.onEndlogEventDelegate = new EndOperationDelegate(this.OnEndlogEvent);
            }
            if ((this.onlogEventCompletedDelegate == null)) {
                this.onlogEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnlogEventCompleted);
            }
            base.InvokeAsync(this.onBeginlogEventDelegate, new object[] {
                        eventId,
                        strEventType,
                        strEventMessage,
                        strMachineName,
                        strUsername,
                        strSource,
                        dtDateTime}, this.onEndlogEventDelegate, this.onlogEventCompletedDelegate, userState);
        }
        
        public EventMonitoringService.EventLogger.ResultLog getLogInfo(string machineName) {
            return base.Channel.getLogInfo(machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetLogInfo(string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLogInfo(machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EventMonitoringService.EventLogger.ResultLog EndgetLogInfo(System.IAsyncResult result) {
            return base.Channel.EndgetLogInfo(result);
        }
        
        private System.IAsyncResult OnBegingetLogInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string machineName = ((string)(inValues[0]));
            return this.BegingetLogInfo(machineName, callback, asyncState);
        }
        
        private object[] OnEndgetLogInfo(System.IAsyncResult result) {
            EventMonitoringService.EventLogger.ResultLog retVal = this.EndgetLogInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLogInfoCompleted(object state) {
            if ((this.getLogInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLogInfoCompleted(this, new getLogInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLogInfoAsync(string machineName) {
            this.getLogInfoAsync(machineName, null);
        }
        
        public void getLogInfoAsync(string machineName, object userState) {
            if ((this.onBegingetLogInfoDelegate == null)) {
                this.onBegingetLogInfoDelegate = new BeginOperationDelegate(this.OnBegingetLogInfo);
            }
            if ((this.onEndgetLogInfoDelegate == null)) {
                this.onEndgetLogInfoDelegate = new EndOperationDelegate(this.OnEndgetLogInfo);
            }
            if ((this.ongetLogInfoCompletedDelegate == null)) {
                this.ongetLogInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLogInfoCompleted);
            }
            base.InvokeAsync(this.onBegingetLogInfoDelegate, new object[] {
                        machineName}, this.onEndgetLogInfoDelegate, this.ongetLogInfoCompletedDelegate, userState);
        }
        
        public EventMonitoringService.EventLogger.ResultSet addNewMachine(string type, string machineName, string environment) {
            return base.Channel.addNewMachine(type, machineName, environment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddNewMachine(string type, string machineName, string environment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddNewMachine(type, machineName, environment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EventMonitoringService.EventLogger.ResultSet EndaddNewMachine(System.IAsyncResult result) {
            return base.Channel.EndaddNewMachine(result);
        }
        
        private System.IAsyncResult OnBeginaddNewMachine(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string type = ((string)(inValues[0]));
            string machineName = ((string)(inValues[1]));
            string environment = ((string)(inValues[2]));
            return this.BeginaddNewMachine(type, machineName, environment, callback, asyncState);
        }
        
        private object[] OnEndaddNewMachine(System.IAsyncResult result) {
            EventMonitoringService.EventLogger.ResultSet retVal = this.EndaddNewMachine(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddNewMachineCompleted(object state) {
            if ((this.addNewMachineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addNewMachineCompleted(this, new addNewMachineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addNewMachineAsync(string type, string machineName, string environment) {
            this.addNewMachineAsync(type, machineName, environment, null);
        }
        
        public void addNewMachineAsync(string type, string machineName, string environment, object userState) {
            if ((this.onBeginaddNewMachineDelegate == null)) {
                this.onBeginaddNewMachineDelegate = new BeginOperationDelegate(this.OnBeginaddNewMachine);
            }
            if ((this.onEndaddNewMachineDelegate == null)) {
                this.onEndaddNewMachineDelegate = new EndOperationDelegate(this.OnEndaddNewMachine);
            }
            if ((this.onaddNewMachineCompletedDelegate == null)) {
                this.onaddNewMachineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddNewMachineCompleted);
            }
            base.InvokeAsync(this.onBeginaddNewMachineDelegate, new object[] {
                        type,
                        machineName,
                        environment}, this.onEndaddNewMachineDelegate, this.onaddNewMachineCompletedDelegate, userState);
        }
        
        public EventMonitoringService.EventLogger.ResultSet removeMachine(string machineName) {
            return base.Channel.removeMachine(machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveMachine(string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveMachine(machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public EventMonitoringService.EventLogger.ResultSet EndremoveMachine(System.IAsyncResult result) {
            return base.Channel.EndremoveMachine(result);
        }
        
        private System.IAsyncResult OnBeginremoveMachine(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string machineName = ((string)(inValues[0]));
            return this.BeginremoveMachine(machineName, callback, asyncState);
        }
        
        private object[] OnEndremoveMachine(System.IAsyncResult result) {
            EventMonitoringService.EventLogger.ResultSet retVal = this.EndremoveMachine(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremoveMachineCompleted(object state) {
            if ((this.removeMachineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeMachineCompleted(this, new removeMachineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeMachineAsync(string machineName) {
            this.removeMachineAsync(machineName, null);
        }
        
        public void removeMachineAsync(string machineName, object userState) {
            if ((this.onBeginremoveMachineDelegate == null)) {
                this.onBeginremoveMachineDelegate = new BeginOperationDelegate(this.OnBeginremoveMachine);
            }
            if ((this.onEndremoveMachineDelegate == null)) {
                this.onEndremoveMachineDelegate = new EndOperationDelegate(this.OnEndremoveMachine);
            }
            if ((this.onremoveMachineCompletedDelegate == null)) {
                this.onremoveMachineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveMachineCompleted);
            }
            base.InvokeAsync(this.onBeginremoveMachineDelegate, new object[] {
                        machineName}, this.onEndremoveMachineDelegate, this.onremoveMachineCompletedDelegate, userState);
        }
    }
}
